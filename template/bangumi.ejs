<link rel="stylesheet" href="//at.alicdn.com/t/font_3167935_mshz09q56.css">
<style>
  /* 删除所有边距 */
  * {
    margin: 0;
    padding: 0;
  }

  /* 封面动画 */
  .cover {
    animation: rotate360 20s linear infinite;
  }

  /* 360旋转动画 */
  @-webkit-keyframes rotate360 {
    from {
      -webkit-transform: rotate(0deg);
    }

    to {
      -webkit-transform: rotate(360deg);
    }
  }

  /* 隐藏歌词那里的滚动条 */
  .lrcs::-webkit-scrollbar {
    display: none;
  }

  /* 每一条歌词样式 */
  .lrcs p {
    font-size: 0.5rem;
    color: rgb(216, 221, 225);
    margin: 0;
    padding: 0;
    line-height: 1.5rem;
  }

  /* 页面按钮的公用样式 */
  .button {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    border: 0;
    background-color: rgba(216, 221, 225, 0);
  }

  /* 按钮按下的样式 */
  .button:active {
    box-shadow: inset 0 0 0.1rem rgba(182, 182, 182, 0.89);
  }

  /*进度条样式*/
  .range {
    -webkit-appearance: none;
    /*清除系统默认样式*/
    width: 100%;
    border-radius: 10px;
    background: -webkit-linear-gradient(rgb(144, 216, 216), rgb(144, 216, 216)) no-repeat, #ddd;
    /*设置左边颜色为#61bd12，右边颜色为#ddd*/
    background-size: 0% 100%;
    /*设置左右宽度比例*/
    height: 3px;
    /*横条的高度*/
  }

  /*拖动块的样式*/
  .range::-webkit-slider-thumb {
    -webkit-appearance: none;
    /*清除系统默认样式*/
    height: 20px;
    /*拖动块高度*/
    width: 20px;
    /*拖动块宽度*/
    background: #fff;
    /*拖动块背景*/
    border-radius: 50%;
    /*外观设置为圆形*/
    border: solid 1px #ddd;
    /*设置边框*/
    transition: 0.30s;
  }

  /* 进度条滑块滑动时样式 */
  .range::-webkit-slider-thumb:active {
    width: 26px;
    height: 26px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  }

  /* 播放列表蒙版box的样式 */
  .listOverlay {
    position: absolute;
    left: 0%;
    bottom: -100%;
    transition: 0.3s;
    display: none;
    width: 100%;
    height: 100%;
    z-index: 2;
    border-radius: 10px;
    overflow: scroll;
    background-color: rgb(255, 255, 255);
  }

  .listOverlay::-webkit-scrollbar {
    display: none;
  }

  #top_img {
    width: 100%;
    height: 100%;
    object-fit: fill;
    position: absolute;
    top: 0px;
    opacity: 0.5;
    filter: blur(5px);
  }

  #top_img:hover {
    opacity: 1;

    filter: blur(0px);
  }
</style>
<div style="width: 100%;height: 100%;border-radius: 20px;overflow: hidden;position: relative;">
  <!-- 显示歌曲列表的模板开始 -->
  <div id="listOverlay" class="listOverlay">
    <div style="width: 100%;height: 50%;position: sticky;">
      <button id="close" style="position: absolute;z-index: 222;left: 1rem;top: 1rem;"
        class="iconfont icon-guanbi button"></button>
      <img id='top_img' src="https://tva3.sinaimg.cn/large/0072Vf1pgy1foxk79mt63j31hc0u0qlp.jpg" alt="">
      <video id="video" controls style="width: 100%;height: 100%;display: none;z-index: 2;position: absolute;"></video>
    </div>
    <div class="list_card" style="position: absolute;width: 100%;">
      <div style="top: 00.3rem;">
        <button class="iconfont icon-wangyiyunyinle button list_icon"
          onclick="top.location.href='https://music.163.com/#/my/m/music/playlist?id=7250812349'"></button>
        <button class="iconfont icon-bili button list_icon"
          onclick="top.location.href='https://www.bilibili.com/audio/mycollection/7559394'"></button>
        <span id="music_count"
          style="font-size: 0.05rem;color: rgba(116, 116, 116, 0.863);right: 15px;top: 1rem;position: absolute;">共150首</span>
      </div>
      <div id="music_list">
      </div>
    </div>
  </div>
  <!-- 显示歌曲列表的模板结束 -->
  <!-- 头部开始 -->
  <div
    style="width: auto;height: 50px;display: flex;display: -webkit-flex;justify-content: space-between;align-items: center; padding: 10px;padding-top: 20px;">
    <!-- 后退图标 -->
    <!-- <span class="iconfont icon-houtui" style="font-size: 30px;color: rgb(59, 69, 79);"></span> -->
    <span id="songName" style="font-size: 25px;color: rgb(59, 69, 79);margin-top: -5px;">曲名</span>
    <span class="iconfont icon-wangyiyunyinle" style="font-size: 28px;"
      onclick="top.location=ms.playList[ms.playIndex].link"></span>
  </div>
  <!-- 头部结束 -->
  <!-- 中间唱片开始 -->
  <div style="width: auto;height: 300px;overflow: hidden;display: flex; justify-content: center;align-items: center;">
    <img id='cover' style="width: 150px;height: 150px;border-radius:50%;box-shadow: 0 0 10px 10px rgba(0, 0, 0, 0.1);"
      alt="">
  </div>
  <!-- 中间唱片结束 -->
  <!-- 歌词开始 -->
  <div>
    <div id="lrc" style="position: relative;text-align: center;height: 8rem;overflow:scroll" class=" lrcs">
    </div>
    <div style="width: 100%;height: auto;display: grid;grid-template-columns: 1fr 1fr">
      <button id="mv" class="iconfont icon-mv button button" style="width: 00.8rem;height: 00.8rem;"></button>
      <button id="translation" class="iconfont icon-Translate button"
        style="width: 00.8rem;height: 00.8rem;justify-self:end"></button>
    </div>
  </div>
  <!-- 歌词结束 -->
  <!-- 播放时间开始 -->
  <div
    style="display: flex;justify-content: space-between;margin-top: 1rem;color: rgb(206, 207, 209);font-size: 0.5rem;">
    <div id="nowPlay" style="margin-left: 2rem;">00:00</div>
    <div id="totalPlay" style="margin-right: 2rem;">Loding...</div>
  </div>
  <!-- 播放时间结束 -->
  <!-- 播放进度开始 -->
  <div style="width: 80%;height: 0.2rem;border-radius: 10px;margin-left: auto;margin-right: auto;margin-bottom: 1rem;">
    <input type="range" id="range" class="range" value="0">
  </div>
  <!-- 播放进度结束 -->
  <!-- 功能按钮开始 -->
  <div style="display: flex;justify-content: center;padding-top: 1rem;padding-bottom: 2rem;position: relative;">
    <button id="sort" class="iconfont icon-shunxu button"></button>
    <div style="display: flex;justify-content: space-between;width: 60%;height: auto;">
      <button id="prev" class="iconfont icon-shangyishou button"></button>
      <button id="play" class="iconfont icon-bofang button"></button>
      <button id="next" class="iconfont icon-xiayishou button"></button>
    </div>
    <button id="list" class="iconfont icon-liebiao button" style=""></button>
  </div>

</div>
<audio id="audio1"></audio>
<script>
  class MusicPlayer {
    constructor(playInfo, playIndex, cover, songName, lrcs, range, nowPlay, totalPlay, play, prev, next, translation, mv, sort, list, listOverlay, close, music_list, music_count, video) {
      /* 
      playInfo:歌曲信息，格式为
      {
        cover: 歌曲封面
        lyric: 歌曲歌词
        name: 歌曲名
        tlyric: 歌曲歌词翻译(若无则参数为空)
        url: 歌曲链接
      }
      playIndex: 歌曲索引
      cover: 封面img的document对象
      songName: 歌曲名的document对象
      lrcs: 歌词的document对象
      range: 拖动块的document对象
      nowPlay: 当前播放时间的document对象
      totalPlay: 总时间的document对象
      play: 播放按钮的document对象
      prev: 上一首按钮的document对象
      next: 下一首按钮的document对象
      translation: 翻译按钮的document对象
      mv: 翻译旁边的mv按钮的document对象
      sort: 排序按钮的document对象  
      list: 歌曲列表按钮的document对象
      listOverlay: 歌曲列表的document对象
      close: 歌曲列表的关闭按钮的document对象
      music_list: 歌曲列表的document对象
      music_count: 歌曲列表的数量
      video: 视频的document对象
      */
      this.playInfo = playInfo;
      this.playList = this.playInfo;
      this.playIndex = playIndex;
      this.audio = document.getElementById('audio1');
      this.cover = cover;
      this.songName = songName;
      this.lrcs = lrcs;
      this.range = range;
      this.nowPlay = nowPlay;
      this.totalPlay = totalPlay;
      this.play = play;
      this.prev = prev;
      this.next = next;
      this.translation = translation;
      this.mv = mv;
      this.sort = sort;
      this.list = list;
      this.listOverlay = listOverlay;
      this.close = close;
      this.music_list = music_list;
      this.music_count = music_count;
      this.video = video;
      fetch(this.playList).then(res => res.json()).then(data => {
        // 只接受一首歌曲，切换歌就切换this.playList
        this.playList = data;
        this.init(this.playList[playIndex]);
      });
    }

    init(playInfo) {

      // 初始化歌曲播放链接
      this.audio.src = 'https://music.163.com/song/media/outer/url?id=' + playInfo.songid + '.mp3';
      // 初始化封面
      this.cover.src = playInfo.pic;
      // 初始化歌曲名
      this.songName.innerHTML = playInfo.title;
      // 初始化歌词
      this.initLrc(playInfo.lrc);
      // 当音乐缓存完毕时,初始化操作
      this.audio.addEventListener('canplay', () => {
        // 初始化播放时间
        const fen = Math.floor(this.audio.duration / 60);
        const miao = Math.floor(this.audio.duration % 60);
        this.totalPlay.innerHTML = `${fen}:${miao > 9 ? miao : '0' + miao}`;
      });

      // 当音乐开始播放时
      this.audio.addEventListener('play', () => {
        // 封面开始旋转
        this.cover.style.animation = 'rotate360 20s linear infinite'
        // 更新图标
        this.play.className = 'iconfont icon-zanting button';
      });

      // 开始监听进度条
      this.range.addEventListener('input', () => {
        // 更改滑块前的背景占比
        this.range.style.backgroundSize = this.range.value + '% 100%';
        // 同步播放时间
        this.audio.currentTime = this.audio.duration * (this.range.value / 100);
        this.playAction()
        // 同步已播放时间
        this.nowPlay.innerHTML = Math.floor(this.audio.currentTime / 60) + ':' + Math.floor(this.audio.currentTime % 60);
      });

      // 调用音乐控制器
      this.control()
    }

    // 初始化歌词
    initLrc(lrc) {
      // 删除容器中的所有元素
      while (this.lrcs.firstChild) {
        this.lrcs.removeChild(this.lrcs.firstChild);
      }
      // 切割时间和内容
      let lrcArr = lrc.split('[');
      // 初始化存放歌词和时间的数组
      let lrcObj = [];
      // 循环切割的数组
      lrcArr.forEach((item, index) => {
        if (index !== 0) {
          // 切割分秒和毫秒
          let time = item.split(']')[0].split('.')
          // 切割分和秒
          let timeSec = time[0].split(':')
          // 组合精确到毫秒的时间
          timeSec = parseInt(timeSec[0]) * 60 + parseInt(timeSec[1]) + time[1] / 1000
          // 切割歌词
          let content = item.split(']')[1];
          content = content.replace(/\n/g, '');
          // 判断歌词是否为空
          if (content == '') {
            content = 'Music'
          }
          // 将时间和歌词存入数组
          lrcObj.push({
            timeSec,
            content
          })
        }
      })
      lrcObj.forEach((item, index) => {
        // 创建歌词元素
        const elp = document.createElement('p');
        // 设置歌词元素的内容
        elp.innerHTML = item.content;
        // 将elp的id设置为歌词时间来匹配歌词
        elp.setAttribute('id', item.timeSec);
        // 将歌词挂载到容器
        this.lrcs.appendChild(elp);
      })

      // 匹配歌词
      this.audio.ontimeupdate = () => {
        // 获取当前播放时间
        let currentTime = this.audio.currentTime;
        // 循环歌词
        for (let i = 0; i < lrcObj.length; i++) {
          try {
            // 判断歌词是否在当前播放时间内
            if (currentTime >= lrcObj[i].timeSec && currentTime < lrcObj[i + 1].timeSec) {
              // 设置当前歌词样式
              this.lrcs.children[i].style.color = 'red';
              this.lrcs.children[i].style.fontSize = '1rem';
              // 这里控制歌词滚动居中的位置
              this.lrcs.scrollTop = this.lrcs.children[i].offsetTop - this.lrcs.children[i].offsetHeight * 2;
              // 除去其他歌词颜色
              for (let j = 0; j < this.lrcs.children.length; j++) {
                if (j != i) {
                  this.lrcs.children[j].style.color = 'rgb(216, 221, 225)';
                  this.lrcs.children[j].style.fontSize = '0.5rem';
                }
              }
            }
          } catch (e) {
            // 播放完毕
          }
        }

        // 同步播放时间和滑轨
        const fen = Math.floor(this.audio.currentTime / 60);
        const miao = Math.floor(this.audio.currentTime % 60);
        this.nowPlay.innerHTML = `${fen}:${miao > 9 ? miao : '0' + miao}`;
        this.range.value = this.audio.currentTime / this.audio.duration * 100;
        this.range.style.backgroundSize = this.range.value + '% 100%';
      }
    }

    // 控制区域
    control() {
      // 播放完自动播放下一首
      this.audio.onended = () => {
        this.next.click();
      }

      // 播放按钮
      this.play.onclick = () => {
        // 判断是否播放
        if (this.audio.paused) {

          // 播放
          this.audio.play();
          // 改变按钮样式
          this.play.className = 'iconfont icon-zanting button';
        } else {
          console.log('暂停123')
          // 暂停
          this.play.className = 'iconfont icon-bofang button';
          this.audio.pause();
          // 改变按钮样式
        }
      }
      // 上一首
      this.prev.onclick = () => {
        if (this.playIndex > 0) {
          this.pause()
          this.totalPlay.innerHTML = 'Loding...';
          this.playIndex--;
          this.initLrc(this.playList[this.playIndex].lrc);
          this.cover.src = this.playList[this.playIndex].pic
          this.audio.src = this.playList[this.playIndex].url;
          // 当audio缓存完毕后执行
          this.audio.oncanplay = () => {
            this.audio.play();
            this.songName.innerHTML = this.playList[this.playIndex].title
            this.range.style.backgroundSize = '0% 100%';
          }
          this.nowPlay.innerHTML = this.playList[this.playIndex].name;
        }
      }
      // 下一首
      this.next.onclick = () => {
        if (this.playIndex != this.playList.length - 1) {
          this.pause()
          this.totalPlay.innerHTML = 'Loding...';
          this.playIndex++;
          this.initLrc(this.playList[this.playIndex].lrc);
          this.cover.src = this.playList[this.playIndex].pic
          this.audio.src = this.playList[this.playIndex].url;
          // 当audio缓存完毕后执行
          this.audio.oncanplay = () => {
            this.audio.play();
            this.songName.innerHTML = this.playList[this.playIndex].title
            this.range.style.backgroundSize = '0% 100%';
          }
          this.nowPlay.innerHTML = this.playList[this.playIndex].url;
        }
      }

      // 翻译和mv
      let count = 0;
      this.translation.onclick = () => {
        if (count === 0) {
          this.initLrc(this.playList[this.playIndex].tlrc);
          count = 1;
          console.log(count);
        }
        else {
          this.initLrc(this.playList[this.playIndex].lrc);
          count = 0;
        }
      }
      this.audio.addEventListener('canplay', () => {
        if (this.playList[this.playIndex].tlrc) {
          this.translation.style.display = 'block';
        } else {
          this.translation.style.display = 'none';
        }
        if (this.playList[this.playIndex].mv) {
          this.mv.style.display = 'block';
        } else {
          this.mv.style.display = 'none';
        }
      })
      // mv
      this.mv.onclick = () => {
        alert('在播放列表查看 mv')
        this.video.style.display = 'block';
        this.video.src = this.playList[this.playIndex].mv;
        this.video.play();
        this.play.className = 'iconfont icon-bofang button';
        this.audio.pause();
      }

      // 播放顺序
      this.sort.onclick = () => {
        // 如果className包含icon-shunxu
        if (this.sort.className.indexOf('icon-shunxu') != -1) {
          // 随机播放代码
          this.audio.loop = false
          this.playList.sort(() => {
            return Math.random() - 0.5;
          })
          this.sort.className = 'iconfont icon-suijibofang button';
        } else if (this.sort.className.indexOf('icon-suijibofang') != -1) {
          // 循环代码
          this.audio.loop = true;
          this.sort.className = 'iconfont icon-xunhuanjianting button';
        } else if (this.sort.className.indexOf('icon-xunhuanjianting') != -1) {
          // 顺序代码
          this.audio.loop = false
          fetch(this.playInfo).then(res => res.json()).then(data => {
            this.playList = data;
          });
          this.sort.className = 'iconfont icon-shunxu button';
        }
      }

      // 显示播放列表
      this.list.onclick = () => {
        this.listOverlay.style.display = 'block';
        setTimeout(() => {
          this.listOverlay.style.bottom = '0px'
        }, .1)
        this.music_count.innerHTML = `共${this.playList.length}首`;
        this.music_list.innerHTML = ''
        for (let i = 0; i < this.playList.length; i++) {
          const elDiv = document.createElement('div');
          const elDivImg = document.createElement('img');
          elDivImg.src = this.playList[i].pic;
          const elDivDiv = document.createElement('div');
          elDivDiv.onclick = () => {
            // 切换为当前选择的歌曲
            this.audio.src = this.playList[i].url;
            this.cover.src = this.playList[i].pic;
            this.initLrc(this.playList[i].lrc);
            this.audio.play();
          }
          const elDivDivP1 = document.createElement('span');
          elDivDivP1.innerHTML = this.playList[i].title;
          const elDivDivP2 = document.createElement('span');
          elDivDivP2.innerHTML = this.playList[i].author;
          const elDivButton1 = document.createElement('button');
          elDivButton1.className = this.playList[i].mv ? 'iconfont icon-mv button' : 'button';
          if (!this.playList[i].mv) elDivButton1.disabled = true
          elDivButton1.onclick = () => {
            if (this.playList[i].mv) {
              this.video.style.display = 'block';
              this.video.src = this.playList[i].mv;
              this.audio.pause();
              this.video.play();
            }
          }
          const elDivButton2 = document.createElement('button');
          elDivButton2.onclick = () => {
            top.location.href = this.playList[i].link;
          }
          switch (this.playList[i].type) {
            case 'netease':
              elDivButton2.className = 'iconfont icon-wangyiyunyinle button';
              break;
            case 'bilibili':
              elDivButton2.className = 'iconfont icon-bili button';
              break;
            default:
              elDivButton2.className = ' button';
              elDivButton2.disabled = true;
          }
          this.music_list.appendChild(elDiv);
          elDiv.appendChild(elDivImg);
          elDiv.appendChild(elDivDiv);
          elDivDiv.appendChild(elDivDivP1);
          elDivDiv.appendChild(elDivDivP2);
          elDiv.appendChild(elDivButton1)
          elDiv.appendChild(elDivButton2)
        }
      }

      // 关闭播放列表
      this.close.onclick = () => {
        this.video.pause();
        this.listOverlay.style.bottom = '-100%';
        setTimeout(() => {
          this.listOverlay.style.display = 'none';
        }, 500)
      }
    }
    playAction() {
      this.audio.play();
    }
    pause() {
      this.audio.pause();
    }
  }

  const ms = new MusicPlayer(
    'https://cdn.jsdelivr.net/gh/1802024110/GitHub_Oss@main/Lyrics/playList1.json',
    0,
    document.getElementById('cover'),
    document.getElementById('songName'),
    document.getElementById('lrc'),
    document.getElementById('range'),
    document.getElementById('nowPlay'),
    document.getElementById('totalPlay'),
    document.getElementById('play'),
    document.getElementById('prev'),
    document.getElementById('next'),
    document.getElementById('translation'),
    document.getElementById('mv'),
    document.getElementById('sort'),
    document.getElementById('list'),
    document.getElementById('listOverlay'),
    document.getElementById('close'),
    document.getElementById('music_list'),
    document.getElementById('music_count'),
    document.getElementById('video')
  );
</script>
<style>
  .icon-bofang {
    font-size: 2rem;
    color: rgb(144, 216, 216);
  }

  .icon-xiayishou,
  .icon-shangyishou {
    font-size: 1rem;
    color: #caccdb;
  }

  .icon-shunxu {
    font-size: 2.4rem;
    position: relative;
    bottom: -0.1rem;
    vertical-align: bottom;
  }

  .icon-Translate {
    margin-right: 1rem;
  }

  .icon-guanbi {
    font-size: 2rem;
    color: #000000;
  }

  .list_icon {
    font-size: 1.5rem;
    color: #000000;
  }

  #music_list>div {
    display: grid;
    grid-template-columns: 1fr 6fr 1fr 1fr;
    align-items: center;
  }

  #music_list>div:active {
    border-radius: 10px;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .1);
  }

  #music_list div img {
    object-fit: fill;
    width: 2.6rem;
    height: 2.6rem;
    border-radius: 50%;
    margin-left: 0.5rem;
  }

  #music_list div div {
    display: grid;
    margin-left: 10px;
  }

  #music_list div div span:nth-child(2) {
    font-size: 00.1rem;
    color: rgba(153, 136, 136, 0.877);
  }
</style>